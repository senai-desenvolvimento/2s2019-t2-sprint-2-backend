Olá, a empresa Peoples solicitou que você criasse a API que contém os dados de todos os funcionários da empresa. A peoples optou que os funcionários tivessem apenas nome e sobrenome.
Para isto, você deverá ser capaz de:

Banco de Dados:
Script 01 : criar o banco de dados M_Peoples/T_Peoples; Tabela de Funcionarios contendo nome e sobrenome;
Script 02 : inserir os funcionários Catarina Strada e Tadeu Vitelli com os sobrenomes;
Script 03 : selecionar todos os registros;

Backend:
Criar um projeto chamado Senai.Peoples.WebApi;
Criar o modelo correspondente;
Criar o repositório correspondente que contenha as ações de: listar, buscar por id, deletar, atualizar e inserir;
Criar o controller contendo os seguintes verbos:

GET 		/api/funcionarios
POST 		/api/funcionarios

GET 		/api/funcionarios/{id}
PUT 		/api/funcionarios/{id}
DELETE 		/api/funcionarios/{id}

Postman:
Você deverá criar uma coleção no postman chamada: Senai.Peoples.Manha/Senai.Peoples.Tarde com os endpoints correspondentes ao item acima;
Logo, você terá 5 itens dentro da pasta Funcionários com os verbos correspondentes;

GitHub:
Você deverá criar um repositório (2s2019-t2-sprint-2-backend-peoples ou 2s2019-t2-sprint-2-backend) ou adicionar ao seu repositório de backend existente o projeto acabado de criar, os scripts do banco de dados (01, 02 e 03) e além disso, exportar a coleção do postman e disponibilizar essa coleção dentro do repositório.

Desafios Extras:
Incluir data de nascimento para os funcionários;
Criar um endpoint chamado /api/funcionarios/buscar/{nome} passando como parâmetro o nome do funcionário e realizando a determinada busca no banco;
Criar um endpoint chamado /api/funcionarios/nomescompletos que na saída do json, o nome e o sobrenome venham na mesma chave. Ex.: { "nomeCompleto" : "Catarina Strada" };
Fazer com que o nome do Funcionário do backend seja obrigatório e mostre uma mensagem de erro, caso o usuário não envie.

Criar APENAS UM endpoint para que seja listado os nomes dos funcionários em ordem crescente ou decrescente. Da seguinte maneira:
GET /api/funcionarios/ordenacao/{ordem}
GET /api/funcionarios/ordenacao/asc ou GET /api/funcionarios/ordenacao/desc
Caso o usuário informe uma ordenação que não exista, retornar uma mensagem de erro e devolver o erro 400 BadRequest).

